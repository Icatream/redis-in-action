// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ria/lettuce/streaming/streaming.proto

package ria.lettuce.streaming;

import com.google.protobuf.*;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

/**
 * Protobuf type {@code Subscription}
 */
public final class Subscription extends GeneratedMessageV3 implements SubscriptionOrBuilder {
    // @@protoc_insertion_point(message_implements:Subscription)
    private static final long serialVersionUID = 0L;

    // Use Subscription.newBuilder() to construct.
    private Subscription(GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private Subscription() {
        channel_ = "";
        message_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
        return new Subscription();
    }

    @Override
    public final UnknownFieldSet getUnknownFields() {
        return this.unknownFields;
    }

    private Subscription(CodedInputStream input,
                         ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
            throw new NullPointerException();
        }
        UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    case 10:
                        channel_ = input.readStringRequireUtf8();
                        break;
                    case 18:
                        message_ = input.readStringRequireUtf8();
                        break;
                    default:
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(e)
              .setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }

    public static Descriptors.Descriptor getDescriptor() {
        return StreamingServiceProto.internal_static_ria_lettuce_streaming_Subscription_descriptor;
    }

    @Override
    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
        return StreamingServiceProto.internal_static_ria_lettuce_streaming_Subscription_fieldAccessorTable
          .ensureFieldAccessorsInitialized(Subscription.class, Subscription.Builder.class);
    }

    public static final int CHANNEL_FIELD_NUMBER = 1;
    private volatile Object channel_;

    /**
     * <code>string channel = 1;</code>
     */
    public String getChannel() {
        Object ref = channel_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            channel_ = s;
            return s;
        }
    }

    /**
     * <code>string channel = 1;</code>
     */
    public ByteString
    getChannelBytes() {
        Object ref = channel_;
        if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String) ref);
            channel_ = b;
            return b;
        } else {
            return (ByteString) ref;
        }
    }

    public static final int MESSAGE_FIELD_NUMBER = 2;
    private volatile Object message_;

    /**
     * <code>string message = 2;</code>
     */
    public String getMessage() {
        Object ref = message_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            message_ = s;
            return s;
        }
    }

    /**
     * <code>string message = 2;</code>
     */
    public ByteString
    getMessageBytes() {
        Object ref = message_;
        if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String) ref);
            message_ = b;
            return b;
        } else {
            return (ByteString) ref;
        }
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output) throws IOException {
        if (!getChannelBytes().isEmpty()) {
            GeneratedMessageV3.writeString(output, 1, channel_);
        }
        if (!getMessageBytes().isEmpty()) {
            GeneratedMessageV3.writeString(output, 2, message_);
        }
        unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getChannelBytes().isEmpty()) {
            size += GeneratedMessageV3.computeStringSize(1, channel_);
        }
        if (!getMessageBytes().isEmpty()) {
            size += GeneratedMessageV3.computeStringSize(2, message_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Subscription)) {
            return super.equals(obj);
        }
        Subscription other = (Subscription) obj;

        if (!getChannel().equals(other.getChannel()))
            return false;
        if (!getMessage().equals(other.getMessage()))
            return false;
        return unknownFields.equals(other.unknownFields);
    }

    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getChannel().hashCode();
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static Subscription parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Subscription parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Subscription parseFrom(ByteString data)
      throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Subscription parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Subscription parseFrom(byte[] data)
      throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Subscription parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Subscription parseFrom(InputStream input)
      throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static Subscription parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
      throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static Subscription parseDelimitedFrom(InputStream input)
      throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static Subscription parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry)
      throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static Subscription parseFrom(CodedInputStream input)
      throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static Subscription parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
      throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(Subscription prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
        return new Builder(parent);
    }

    /**
     * Protobuf type {@code Subscription}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements SubscriptionOrBuilder {
        // @@protoc_insertion_point(builder_implements:Subscription)
        public static Descriptors.Descriptor getDescriptor() {
            return StreamingServiceProto.internal_static_ria_lettuce_streaming_Subscription_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return StreamingServiceProto.internal_static_ria_lettuce_streaming_Subscription_fieldAccessorTable
              .ensureFieldAccessorsInitialized(Subscription.class, Subscription.Builder.class);
        }

        // Construct using Subscription.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
            }
        }

        @Override
        public Builder clear() {
            super.clear();
            channel_ = "";

            message_ = "";

            return this;
        }

        @Override
        public Descriptors.Descriptor getDescriptorForType() {
            return StreamingServiceProto.internal_static_ria_lettuce_streaming_Subscription_descriptor;
        }

        @Override
        public Subscription getDefaultInstanceForType() {
            return Subscription.getDefaultInstance();
        }

        @Override
        public Subscription build() {
            Subscription result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public Subscription buildPartial() {
            Subscription result = new Subscription(this);
            result.channel_ = channel_;
            result.message_ = message_;
            onBuilt();
            return result;
        }

        @Override
        public Builder clone() {
            return super.clone();
        }

        @Override
        public Builder setField(Descriptors.FieldDescriptor field, Object value) {
            return super.setField(field, value);
        }

        @Override
        public Builder clearField(Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @Override
        public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
            return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(Message other) {
            if (other instanceof Subscription) {
                return mergeFrom((Subscription) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(Subscription other) {
            if (other == Subscription.getDefaultInstance())
                return this;
            if (!other.getChannel().isEmpty()) {
                channel_ = other.channel_;
                onChanged();
            }
            if (!other.getMessage().isEmpty()) {
                message_ = other.message_;
                onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }

        @Override
        public final boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            Subscription parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (Subscription) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private Object channel_ = "";

        /**
         * <code>string channel = 1;</code>
         */
        public String getChannel() {
            Object ref = channel_;
            if (!(ref instanceof String)) {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                channel_ = s;
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <code>string channel = 1;</code>
         */
        public ByteString getChannelBytes() {
            Object ref = channel_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                channel_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        /**
         * <code>string channel = 1;</code>
         */
        public Builder setChannel(String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            channel_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>string channel = 1;</code>
         */
        public Builder clearChannel() {
            channel_ = getDefaultInstance().getChannel();
            onChanged();
            return this;
        }

        /**
         * <code>string channel = 1;</code>
         */
        public Builder setChannelBytes(ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            channel_ = value;
            onChanged();
            return this;
        }

        private Object message_ = "";

        /**
         * <code>string message = 2;</code>
         */
        public String getMessage() {
            Object ref = message_;
            if (!(ref instanceof String)) {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                message_ = s;
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <code>string message = 2;</code>
         */
        public ByteString getMessageBytes() {
            Object ref = message_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                message_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        /**
         * <code>string message = 2;</code>
         */
        public Builder setMessage(String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            message_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>string message = 2;</code>
         */
        public Builder clearMessage() {
            message_ = getDefaultInstance().getMessage();
            onChanged();
            return this;
        }

        /**
         * <code>string message = 2;</code>
         */
        public Builder setMessageBytes(ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            message_ = value;
            onChanged();
            return this;
        }

        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:Subscription)
    }

    // @@protoc_insertion_point(class_scope:Subscription)
    private static final Subscription DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new Subscription();
    }

    public static Subscription getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final Parser<Subscription> PARSER = new AbstractParser<Subscription>() {
        @Override
        public Subscription parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
            return new Subscription(input, extensionRegistry);
        }
    };

    public static Parser<Subscription> parser() {
        return PARSER;
    }

    @Override
    public Parser<Subscription> getParserForType() {
        return PARSER;
    }

    @Override
    public Subscription getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

