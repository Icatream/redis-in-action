// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ria/lettuce/streaming/streaming.proto

package ria.lettuce.streaming;

import com.google.protobuf.*;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

/**
 * Protobuf type {@code ApiReq}
 */
public final class ApiReq extends GeneratedMessageV3 implements ApiReqOrBuilder {
    // @@protoc_insertion_point(message_implements:ApiReq)
    private static final long serialVersionUID = 0L;

    // Use ApiReq.newBuilder() to construct.
    private ApiReq(GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private ApiReq() {
        identification_ = "";
        filter_ = 0;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
        return new ApiReq();
    }

    @Override
    public final UnknownFieldSet getUnknownFields() {
        return this.unknownFields;
    }

    private ApiReq(CodedInputStream input,
                   ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
            throw new NullPointerException();
        }
        UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    case 10:
                        identification_ = input.readStringRequireUtf8();
                        break;
                    case 16:
                        filter_ = input.readEnum();
                        break;
                    case 24:
                        id_ = input.readInt64();
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }

    public static Descriptors.Descriptor getDescriptor() {
        return StreamingServiceProto.internal_static_ria_lettuce_streaming_ApiReq_descriptor;
    }

    @Override
    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
        return StreamingServiceProto.internal_static_ria_lettuce_streaming_ApiReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(ApiReq.class, ApiReq.Builder.class);
    }

    /**
     * Protobuf enum {@code ApiReq.Filter}
     */
    public enum Filter implements ProtocolMessageEnum {
        /**
         * <code>SAMPLE = 0;</code>
         */
        SAMPLE(0),
        /**
         * <code>TRACK = 1;</code>
         */
        TRACK(1),
        /**
         * <code>FOLLOW = 2;</code>
         */
        FOLLOW(2),
        /**
         * <code>LOCATION = 3;</code>
         */
        LOCATION(3),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>SAMPLE = 0;</code>
         */
        public static final int SAMPLE_VALUE = 0;
        /**
         * <code>TRACK = 1;</code>
         */
        public static final int TRACK_VALUE = 1;
        /**
         * <code>FOLLOW = 2;</code>
         */
        public static final int FOLLOW_VALUE = 2;
        /**
         * <code>LOCATION = 3;</code>
         */
        public static final int LOCATION_VALUE = 3;

        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static Filter valueOf(int value) {
            return forNumber(value);
        }

        public static Filter forNumber(int value) {
            switch (value) {
                case 0:
                    return SAMPLE;
                case 1:
                    return TRACK;
                case 2:
                    return FOLLOW;
                case 3:
                    return LOCATION;
                default:
                    return null;
            }
        }

        public static Internal.EnumLiteMap<Filter> internalGetValueMap() {
            return internalValueMap;
        }

        private static final Internal.EnumLiteMap<Filter> internalValueMap = Filter::forNumber;

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static Descriptors.EnumDescriptor getDescriptor() {
            return ApiReq.getDescriptor().getEnumTypes().get(0);
        }

        private static final Filter[] VALUES = values();

        public static Filter valueOf(Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        Filter(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ApiReq.Filter)
    }

    public static final int IDENTIFICATION_FIELD_NUMBER = 1;
    private volatile Object identification_;

    /**
     * <code>string identification = 1;</code>
     */
    public String getIdentification() {
        Object ref = identification_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            identification_ = s;
            return s;
        }
    }

    /**
     * <code>string identification = 1;</code>
     */
    public ByteString getIdentificationBytes() {
        Object ref = identification_;
        if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String) ref);
            identification_ = b;
            return b;
        } else {
            return (ByteString) ref;
        }
    }

    public static final int FILTER_FIELD_NUMBER = 2;
    private int filter_;

    /**
     * <code>.ApiReq.Filter filter = 2;</code>
     */
    public int getFilterValue() {
        return filter_;
    }

    /**
     * <code>.ApiReq.Filter filter = 2;</code>
     */
    public ApiReq.Filter getFilter() {
        ApiReq.Filter result = ApiReq.Filter.forNumber(filter_);
        return result == null ? ApiReq.Filter.UNRECOGNIZED : result;
    }

    public static final int ID_FIELD_NUMBER = 3;
    private long id_;

    /**
     * <code>int64 id = 3;</code>
     */
    public long getId() {
        return id_;
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output) throws IOException {
        if (!getIdentificationBytes().isEmpty()) {
            GeneratedMessageV3.writeString(output, 1, identification_);
        }
        if (filter_ != ApiReq.Filter.SAMPLE.getNumber()) {
            output.writeEnum(2, filter_);
        }
        if (id_ != 0L) {
            output.writeInt64(3, id_);
        }
        unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1)
            return size;

        size = 0;
        if (!getIdentificationBytes().isEmpty()) {
            size += GeneratedMessageV3.computeStringSize(1, identification_);
        }
        if (filter_ != ApiReq.Filter.SAMPLE.getNumber()) {
            size += CodedOutputStream.computeEnumSize(2, filter_);
        }
        if (id_ != 0L) {
            size += CodedOutputStream.computeInt64Size(3, id_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof ApiReq)) {
            return super.equals(obj);
        }
        ApiReq other = (ApiReq) obj;

        if (!getIdentification().equals(other.getIdentification()))
            return false;
        if (filter_ != other.filter_)
            return false;
        if (getId() != other.getId())
            return false;
        return unknownFields.equals(other.unknownFields);
    }

    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + IDENTIFICATION_FIELD_NUMBER;
        hash = (53 * hash) + getIdentification().hashCode();
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + filter_;
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + Internal.hashLong(getId());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static ApiReq parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static ApiReq parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static ApiReq parseFrom(ByteString data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static ApiReq parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static ApiReq parseFrom(byte[] data) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static ApiReq parseFrom(byte[] data,
                                   ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static ApiReq parseFrom(InputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static ApiReq parseFrom(InputStream input,
                                   ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static ApiReq parseDelimitedFrom(InputStream input) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static ApiReq parseDelimitedFrom(InputStream input,
                                            ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static ApiReq parseFrom(CodedInputStream input) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static ApiReq parseFrom(CodedInputStream input,
                                   ExtensionRegistryLite extensionRegistry) throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(ApiReq prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
        return new Builder(parent);
    }

    /**
     * Protobuf type {@code ApiReq}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ApiReqOrBuilder {
        // @@protoc_insertion_point(builder_implements:ApiReq)
        public static Descriptors.Descriptor getDescriptor() {
            return StreamingServiceProto.internal_static_ria_lettuce_streaming_ApiReq_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return StreamingServiceProto.internal_static_ria_lettuce_streaming_ApiReq_fieldAccessorTable
              .ensureFieldAccessorsInitialized(ApiReq.class, ApiReq.Builder.class);
        }

        // Construct using ApiReq.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (GeneratedMessageV3.alwaysUseFieldBuilders) {
            }
        }

        @Override
        public Builder clear() {
            super.clear();
            identification_ = "";

            filter_ = 0;

            id_ = 0L;

            return this;
        }

        @Override
        public Descriptors.Descriptor getDescriptorForType() {
            return StreamingServiceProto.internal_static_ria_lettuce_streaming_ApiReq_descriptor;
        }

        @Override
        public ApiReq getDefaultInstanceForType() {
            return ApiReq.getDefaultInstance();
        }

        @Override
        public ApiReq build() {
            ApiReq result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public ApiReq buildPartial() {
            ApiReq result = new ApiReq(this);
            result.identification_ = identification_;
            result.filter_ = filter_;
            result.id_ = id_;
            onBuilt();
            return result;
        }

        @Override
        public Builder clone() {
            return super.clone();
        }

        @Override
        public Builder setField(Descriptors.FieldDescriptor field, Object value) {
            return super.setField(field, value);
        }

        @Override
        public Builder clearField(Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @Override
        public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
            return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(Message other) {
            if (other instanceof ApiReq) {
                return mergeFrom((ApiReq) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(ApiReq other) {
            if (other == ApiReq.getDefaultInstance())
                return this;
            if (!other.getIdentification().isEmpty()) {
                identification_ = other.identification_;
                onChanged();
            }
            if (other.filter_ != 0) {
                setFilterValue(other.getFilterValue());
            }
            if (other.getId() != 0L) {
                setId(other.getId());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }

        @Override
        public final boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(CodedInputStream input,
                                 ExtensionRegistryLite extensionRegistry) throws IOException {
            ApiReq parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (ApiReq) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private Object identification_ = "";

        /**
         * <code>string identification = 1;</code>
         */
        public String getIdentification() {
            Object ref = identification_;
            if (!(ref instanceof String)) {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                identification_ = s;
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <code>string identification = 1;</code>
         */
        public ByteString getIdentificationBytes() {
            Object ref = identification_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                identification_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        /**
         * <code>string identification = 1;</code>
         */
        public Builder setIdentification(String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            identification_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>string identification = 1;</code>
         */
        public Builder clearIdentification() {

            identification_ = getDefaultInstance().getIdentification();
            onChanged();
            return this;
        }

        /**
         * <code>string identification = 1;</code>
         */
        public Builder setIdentificationBytes(ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            identification_ = value;
            onChanged();
            return this;
        }

        private int filter_ = 0;

        /**
         * <code>.ApiReq.Filter filter = 2;</code>
         */
        public int getFilterValue() {
            return filter_;
        }

        /**
         * <code>.ApiReq.Filter filter = 2;</code>
         */
        public Builder setFilterValue(int value) {
            filter_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>.ApiReq.Filter filter = 2;</code>
         */
        public ApiReq.Filter getFilter() {
            ApiReq.Filter result = ApiReq.Filter.forNumber(filter_);
            return result == null ? ApiReq.Filter.UNRECOGNIZED : result;
        }

        /**
         * <code>.ApiReq.Filter filter = 2;</code>
         */
        public Builder setFilter(ApiReq.Filter value) {
            if (value == null) {
                throw new NullPointerException();
            }

            filter_ = value.getNumber();
            onChanged();
            return this;
        }

        /**
         * <code>.ApiReq.Filter filter = 2;</code>
         */
        public Builder clearFilter() {

            filter_ = 0;
            onChanged();
            return this;
        }

        private long id_;

        /**
         * <code>int64 id = 3;</code>
         */
        public long getId() {
            return id_;
        }

        /**
         * <code>int64 id = 3;</code>
         */
        public Builder setId(long value) {

            id_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>int64 id = 3;</code>
         */
        public Builder clearId() {

            id_ = 0L;
            onChanged();
            return this;
        }

        @Override
        public final Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:ApiReq)
    }

    // @@protoc_insertion_point(class_scope:ApiReq)
    private static final ApiReq DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new ApiReq();
    }

    public static ApiReq getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final Parser<ApiReq> PARSER = new AbstractParser<ApiReq>() {
        @Override
        public ApiReq parsePartialFrom(CodedInputStream input,
                                       ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return new ApiReq(input, extensionRegistry);
        }
    };

    public static Parser<ApiReq> parser() {
        return PARSER;
    }

    @Override
    public Parser<ApiReq> getParserForType() {
        return PARSER;
    }

    @Override
    public ApiReq getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

